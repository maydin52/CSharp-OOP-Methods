//Metodun Tanımlanması..
void Islem(string mesaj)
{
    Console.WriteLine("******************");
    Console.WriteLine("* " + mesaj+" *");
    Console.WriteLine("******************");
}

//Metodun cagirilmasi 
//Islem();
//Islem();
//Islem();
//Islem();
//Islem();
//Islem();
//Islem();
//Islem();

Islem("Naber");
Islem("MErhaba");
Islem("Iyı Aksamlar");


//Function:Geriye deger dondurur
//Procedur:Tanımli isleri yapar deger dondurmez...
//Methods:C# bazen deger dondurur bazen dondurmez...

//Metodların Tipleri
//1-Deger donduren veya dondurmeyen metodlar
//2-Parametresi olan veya olmayan metodlar...

//Metod isimleri MS tarafında Pascal Case yazılır..

//... return_type MetodunAdi(parametreler)

// eğer bir metod geriye deger dondurmeyecek ise;
// return type yerine void yazılır...
// return type void harici bir tip ise (int,string, double,bool) o tipten bir deger dondurur...
//bir nmetod geriye deger dondurecekse içerisinde en az bir tane "return" olmalı...

// Metodun imzası içinde [] arasında yazılı olanlar optional parametredir. EF Model First dersindeki örnek gibi.

void Islem()
{ 
    //Geriye deger dondurmeyen, parametresi olmayan metod...
}

int SayiDondur()
{
    return 1;
    //Ulasılamayan kod uyarısı...
    //Console.WriteLine();
}

bool Kontrol()
{ 
  return false;
}

//Console.WriteLine(Islem());
//Deger dondurmeyen metodları CW ile kullanamayız...

Console.WriteLine(SayiDondur());
Console.WriteLine(Kontrol());

int sayi = SayiDondur();
Console.WriteLine(sayi+1);


//Metodlarda parametre
int s1, s2;
//Bu sekilde değişken tanımlanabilir, fakat parametre tanımlamaz...

void Islem(int sayi1 , int sayi2)
{ 
    //İki tamsayi parametresi olan, geriye deger dondurmeyen metod...
    Console.WriteLine(sayi1 /sayi2);
}

void Islem2(string str, bool kontrol,int sayi)
{ 
}

Islem(6, 3);

//Tavsiye edilen kullanım....
int Topla(int sayi1,int sayi2)
{
    return sayi1 + sayi2;    
}

//Metodlar "Ortam Bağımsız" yazılmalıdır... 
void Topla2(int sayi1, int sayi2)
{
    Console.WriteLine(sayi1 + sayi2);
}

Console.WriteLine(Topla(6,4));

Topla2(6, 4);

int DegerDondur(bool kontrol)
{
    if (kontrol)
        return 11;
    else 
        return -11;
}

Console.WriteLine(DegerDondur(true));
Console.WriteLine(DegerDondur(false));


-----------------------------

namespace ConsoleApp2
{
    internal class Program
    {
        static void Yaz() { 
        
        }
        static void Yaz(string mesaj)
        {
            Console.WriteLine("string parametreliş metod calisir...");
        }

        static void Yaz(int sayi)
        {
            Console.WriteLine("int parametrelki metod calisti....");
        }

        static int Yaz(double sayi)
        {
            return 1;
        }
        static void Main(string[] args)
        {
            //NSA:Aynı calisma alanında(scope) aynı isimli iki metod bulunamaz...

            //KURAL : Aynı isimli birden fazla metod yazmak istersek; metodların imzalarının farklı olması gerekir...

            //Imza Nasıl?
            //1-Parametre sayisi
            //2-Parametrenin tipleri

            //Aynı scope içerisinde imzaları farklı olmak kaydıyla n tane metod aşırı yüklenebilir...

            Yaz("deneme");
            Yaz(343);
            

            //Soru: Dairenin Alanını hesaplayan metodu  aynı isimde 3 kere yazınız?
        }
    }
}

------------------------------
void Topla(int s1, int s2)
{
    Console.WriteLine(s1+s2);
   // return s1 + s2;
}


int Toplam(int s1, int s2)
{
    //Console.WriteLine(s1 + s2);
     return s1 + s2;
}

int s= Toplam(4, 5) + 1;
Toplam(3, 3);
Console.ReadLine();

void Yaz(string s)
{ 
  Console.WriteLine("Merhaba "  + s);
}

Yaz("Cevdet");

---------------------------------

namespace ConsoleApp4
{
    internal class Program
    {
        /// <summary>
        /// Daire Alanını Hesaplayan metod
        /// </summary>
        /// <param name="r">yaricap double olmalı...</param>
        /// <returns></returns>
        static double DaireAlaniHesapla(double r)
        {
            return Math.PI * r * r;
        }

        /// <summary>
        /// dfdfgdfh PI sayisi 3 olarak kabul edilir...
        /// </summary>
        /// <param name="r"></param>
        /// <returns></returns>
        static int DaireAlaniHesapla(int r)
        {
            return 3 * r * r;
        }

        /// <summary>
        /// Daire Alanını Hesaplayan metod
        /// </summary>
        /// <param name="r"></param>
        /// <returns></returns>
        static double DaireAlaniHesapla(decimal r)
        {
            return (double)(3.1415M * r * r);
        }

        /// <summary>
        /// Daire Alanını Hesaplayan metod
        /// </summary>
        /// <param name="r"></param>
        /// <param name="pi">pi yi giriniz...</param>
        /// <returns></returns>
        static double DaireAlaniHesapla(double r, double pi )
        {
            return pi * r * r;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="r"></param>
        /// <returns></returns>
        static float DaireAlaniHesapla(float r)
        {
            //CAST op. Tip Donusumu opr.
            return (float)Math.PI * r * r;
        }

        static void Main(string[] args)
        {
            int yaricap =int.Parse(Console.ReadLine());
            Console.WriteLine(DaireAlaniHesapla(yaricap));


            Console.WriteLine(DaireAlaniHesapla(3.0));

            
        }
    }
}

-----------------------------------

namespace ConsoleApp5
{
    internal class Program
    {
        static double Toplam(double sayi1, double sayi2)
        { 
           return sayi1 + sayi2;
        }

        static double Toplam(double sayi1, double sayi2,double sayi3)
        {
            return sayi1 + sayi2 + sayi3;
                 
        }

        static double Toplam(double sayi1, double sayi2, double sayi3,double sayi4)
        {
            return sayi1 + sayi2 + sayi3 + sayi4;

        }

        static void Yaz(int[] sayilar)
        { 
           foreach(int sayi in sayilar)
            {
                Console.WriteLine(sayi);
            }
        }
        static double Sum(params double[] numbers)
        {
            double toplam = 0;
            foreach(double number in numbers)
            {
                toplam += number;
            }

            return toplam;
        }

        static void ParamsTest(params int[] numbers)
        { 
           //NEDEN ???
           //En son parametre params olmalı...
           //Gelen argumentlerden hangisinin nerde biteceğini bilemediği için...
           //bir tane olur, o da en sonda olmalı...

        }
        static void Calis() { }
        static void Main(string[] args)
        {
            //Metodlarda params kullanımı
            //Bir metodun n parametrreli aynı tip aşırı yüklenmiş versiyonu olmasa dahi params kullanarak her seferinde farklı arguments sayısı olacak şekilde bir metodu kullanabiliriz...

            //Params kullanımında; 
            //degerler argument gibi gönderilir...
            //metoda aktarılırken diziye çevrilir...
            //Parametreler AYNI TİP olmak zorunda...

            //Bir metodda sadece bir tane params tanımlanabilir....
            // O da en son parametre olmalıdir...

            int[] sayilar = { 234, 564, 65, 22, 55 };

            Yaz(sayilar);
            //Yaz(1, 1, 1);

            Sum(54, 6, 7, 8, 89, 9, 0, 33, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 33, 31213, 34);

            Sum(54, 6, 7, 8, 89, 9, 0, 33, 3);
            Sum(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);

           // int s= Toplam(6, 7, 78, 8, 9, 8);
         
        }
        
        int Topla(params int[] sayilar)
        {
            int toplam = 0;

            foreach (int sayi in sayilar)
                toplam += sayi;

            return toplam;

        }

        string strMesaj = "Deneme 123";
        //strMesaj.Split(';', ':', ',');

    Console.WriteLine(Topla(1,2));
    Console.WriteLine(Topla(1,2,1,1,1,1,1,1,1,1));
    Console.WriteLine(Topla(1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1));
    Console.WriteLine(Topla(1,2,4,5,65,6));

    }
}

----------------------------

namespace ConsoleApp6
{
    internal class Program
    {
        static void Yaz(int a, int b=22, int c=33)
        {
            Console.WriteLine($"a={a} b={b} c={c}");
        }

        static int Topla(int a, int b = 22, int c = 33)
        {
            return a + b + c;
        }

        static void Main(string[] args)
        {
            //C# 4.0 ile gelmiştir...
            //default parameters, named parameters

            //NSA: Bir metodun kaç arametresi varsa o kadar argument gonderilmelidir...

            //Yaz(1, 2);
            //Yaz(1, 1, 1, 1, 1);

            Yaz(1, 1, 1);
            Yaz(2, 3);
            Yaz(2, 3, 11);

            //Default Parameters
            //Bir metodun bir parametresine deger göndermeden varsayılan degeri ile kullanmak istersek kullanırız...
            //Zorunlu parametrelerden sonra tanımlanmalıdır....
            //Birden fazla olabilir...

            Yaz(1);
            Yaz(c: 33, a: 11); //Named parameters kullanımı

            //Named Parameter kullanırken
            //Sıralama önemli değil...
            //değişken adından sonra : operatoru ile deger atanmalı...

            Console.WriteLine(Topla(1,1,1));

            string strMesaj = "Merhaba Dunya...";
            
        }
    }
}

------------------------------------------

string[] Sehirler()
{
    return new string[] { "Istanbul", "Ankara", "Bursa" };
  
}

Random random= new Random();

Console.WriteLine(random.Next());
Console.WriteLine(random.Next(100));
Console.WriteLine(random.Next(50,75));

-----------------------------------------

//Kendi kendini cagiran metodlar...
//DIKKAT: Sonladırma kısmı önemli...
//yoksa uygulama işsletim sistemi tarafından sonlandırılır...
//stackoverflow hatası...
int Faktoriyel(int sayi)
{
    if (sayi == 1) return 1;
    return sayi * Faktoriyel(sayi - 1);
}
Console.WriteLine(Faktoriyel(5));



//Recursive methods
int Faktoriyel(int sayi)
{
    if (sayi == 1) return 1;
    return sayi * Faktoriyel(sayi - 1);
}

Console.WriteLine(Faktoriyel(5));

//
var d1 = 12;
var d2 = "Cevdet";

var d6 = 44.55;
var d3 = 44.55M;
var d4 = 44.55F;

var ad = Console.ReadLine();


-------------------------------------------

//void SayiDegistir(ref int sayi)
void SayiDegistir(int sayi)
{
    sayi = 999;
}

void DiziDegistir(int[] sayilar)
{ 
    for(int i=0;i<sayilar.Length;i++)
        sayilar[i] = 101;
}

void Yaz(int[] sayilar)
{ 
   foreach(int sayi in sayilar)
        Console.Write(sayi + " ");
    Console.WriteLine();
}

int x = 1;
int[] dizi = { 1, 2, 3, 4, 5, 6 };

Console.WriteLine("Metod calismadan once "+x);
SayiDegistir(x);
//SayiDegistir(ref x);
Console.WriteLine("Metod calistiktan sonra " + x);

Console.WriteLine();

Console.WriteLine("Metod calismadan once ");
Yaz(dizi);
DiziDegistir(dizi);
Console.WriteLine("Metod calistiktan sonra ");
Yaz(dizi);

//Ozet: Bir metoda parametre olarak deger tipli bir değişken gonderildiğinde o değişkenin bir kopyası çıkarılır, o yüzden kopya değişse de orjinal veri değişmez... Referans tiplilerde ise(string haric)
//adresini gonderir, dolayısıyla yapılan değişiklikler orjinal veriyi degistirir...

-------------------------------------------------------

void Metod()
{
    int sayi1 = 111;
    int sayi2 = 222;
}

//int MetodA()
//{
//    return 111;
//}
//Soru : sayi değişkeninin içerisindeki değeri dışarıya aktaran kodu yazınız?

void MetodC(ref int s1, ref int s2)
{
    int sayi1 = 111;
    int sayi2 = 222;

    s1 = sayi1;
    s2 = sayi2;
}

void MetodD(out int s1, out int s2)
{
    int sayi1 = 111;
    int sayi2 = 222;

    s1 = sayi1;
    s2 = sayi2;
}


int x=0, y=0;

MetodC(ref x, ref y);
Console.WriteLine(x  + " " + y);

int u, v;
MetodD(out u,out v);
Console.WriteLine(u + " " + v);

//ref ile out arasındaki en buyuk fark out kullanırken ilk deger ataması yapmak zorunda değiliz...

-----------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp4
{
    internal class Deneme
    {
        int x = 111, y = 222, z = 333;

        public void DegerDondur(string mesaj,out int sayi1,out int sayi2, out int sayi3)
        {
            sayi1 = x; sayi2 = y; sayi3 = z;
        }
    }
}


//Metodlarda ref , out parametreleri...

//int.TryParse()

using ConsoleApp4;

int Toplam(int s1, int s2)
{
    return s1 + s2;
}

Toplam(6, 7);

Deneme deneme = new Deneme();
deneme.DegerDondur("Naber",out int a, out int b, out int c);

Console.WriteLine($"{a} {b} {c}");

//int sayi = int.Parse(Console.ReadLine());
bool kontrol= int.TryParse(Console.ReadLine(), out int sayi);
if(kontrol==true)
    Console.WriteLine(sayi);
else
    Console.WriteLine("Girdiginiz veri tipi yanlış..");

------------------------------------------------------

//int sayi = int.Parse(Console.ReadLine());

//int number;
//bool kontrol = int.TryParse(Console.ReadLine(), out number);
//if (kontrol)
//    Console.WriteLine(number);


bool kontrol = int.TryParse(Console.ReadLine(), out int sayi);
if (kontrol)
    Console.WriteLine(sayi);
    
----------------------------------------------------------




